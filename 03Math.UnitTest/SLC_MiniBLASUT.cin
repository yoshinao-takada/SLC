#pragma region Unit_tests_for_MiniBLAS_with_base_number_type_SLC_<NTID>_t
typedef struct {
    // source vectors[0], [1]
    SLC_<NTID>_t src0[4];
    SLC_<NTID>_t src1[4];
    // scales
    SLC_<NTID>_t scales[4];
    // sum of source vectors
    SLC_<NTID>_t src0_plus_src1[4];
    // scaled sum of source vectors, scaling factor is scales[0]
    SLC_<NTID>_t src0_plus_scales0_x_src1[4];
    // src0 scaled by scales[0]
    SLC_<NTID>_t scaled_src0[4];
    // e-by-e product
    SLC_<NTID>_t src0_x_src1_ebe[4];
    // innerproduct, sum, abssum, tolerance
    SLC_<NTID>_t innerproduct;
    SLC_<NTID>_t sum_src0;
    SLC_<RTID>_t abssum_src0;
    SLC_<RTID>_t tolerance;
} MiniBLASUT_<NTID>_params_t;

SLC_errno_t SLC_<NTID>_copyconjUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* conjugated = alloca(allocsize);
        SLC_<NTID>_copyconj(conjugated, 1, params->src0, 1, count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(SLC_<NTID>_conj(params->src0[i]), conjugated[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_addipUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* sum = alloca(allocsize);
        SLC_<NTID>_copy(sum,1, params->src0, 1, count);
        SLC_<NTID>_addip(sum, params->src1, count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(params->src0_plus_src1[i], sum[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_scaleipUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* scaled = alloca(allocsize);
        SLC_<NTID>_copy(scaled,1, params->src0, 1, count);
        SLC_<NTID>_scaleip(scaled, &params->scales[0], count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(params->scaled_src0[i], scaled[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_scaleaddipUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* sum = alloca(allocsize);
        SLC_<NTID>_copy(sum, 1, params->src0, 1, count);
        SLC_<NTID>_scaleaddip(sum, params->src1, &params->scales[0], count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(params->src0_plus_scales0_x_src1[i], sum[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_multiplyebeipUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* products = alloca(allocsize);
        SLC_<NTID>_copy(products, 1, params->src0, 1, count);
        SLC_<NTID>_multiplyebeip(products, params->src1, count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(params->src0_x_src1_ebe[i], products[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_addsubsUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* sum = alloca(allocsize);
        SLC_<NTID>_addsubs(sum, params->src0, params->src1, count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(params->src0_plus_src1[i], sum[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_scalesubsUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* products = alloca(allocsize);
        SLC_<NTID>_scalesubs(products, params->src0, &params->scales[0], count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(params->scaled_src0[i], products[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_multiplyebesubsUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;    
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_size_t count = SLC_ARRAYSIZE(params->src0);
        SLC_size_t allocsize = count * sizeof(SLC_<NTID>_t);
        SLC_<NTID>_t* products = alloca(allocsize);
        SLC_<NTID>_multyplyebesubs(products, params->src0, params->src1, count);
        for (SLC_size_t i = 0; i < count; i++)
        {
            if (!SLC_<NTID>_areequal(params->src0_x_src1_ebe[i], products[i], params->tolerance))
            {
                err = EXIT_FAILURE;
                SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                break;
            }
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_innerproductUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_<NTID>_t innerproduct = 
            SLC_<NTID>_innerproduct(params->src0, params->src1, SLC_ARRAYSIZE(params->src0));
        if (!SLC_<NTID>_areequal(params->innerproduct, innerproduct, params->tolerance))
        {
            err = EXIT_FAILURE;
            SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
            break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_sumUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_<NTID>_t sum = SLC_<NTID>_sum(params->src0, SLC_ARRAYSIZE(params->src0));
        if (!SLC_<NTID>_areequal(params->sum_src0, sum, params->tolerance))
        {
            err = EXIT_FAILURE;
            SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
            break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_abssumUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        const MiniBLASUT_<NTID>_params_t* params = (const MiniBLASUT_<NTID>_params_t*)(args->data);
        SLC_<RTID>_t abssum = SLC_<NTID>_abssum(params->src0, SLC_ARRAYSIZE(params->src0));
        if (!SLC_<RTID>_areequal(params->abssum_src0, abssum, params->tolerance))
        {
            err = EXIT_FAILURE;
            SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
            break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_<NTID>_MiniBLASUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        SLC_test2(err, SLC_<NTID>_copyconjUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_addipUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_scaleipUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_scaleaddipUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_multiplyebeipUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_addsubsUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_scalesubsUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_multiplyebesubsUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_innerproductUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_sumUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_<NTID>_abssumUT, args, __func__, __LINE__);
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}
#pragma endregion Unit_tests_for_MiniBLAS_with_base_number_type_SLC_<NTID>_t