static const GeometryUTr32_Params_t r32_args = 
{
    { // mat0
        1.0f, 2.5f, 3.5f, 1.5f,
        -2.5f, 1.0f, 0.0f, -2.0f,
        3.5f, 0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 0.0f, 1.0f
    },
    { // pnts
        1.0f, 1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f, 1.0f, 1.0f,
        1.0f, -1.0f, 1.0f, 1.0f,
    },
    { // ref_transformed
        8.5f, -3.5f, 4.5f, 1.0f,
        6.5f, 1.5f, -2.5f, 1.0f,
        3.5f, -5.5f, 4.5f, 1.0f
    }
};
static const GeometryUTr64_Params_t r64_args = 
{
    { // mat0
        1.0, 2.5, 3.5, 1.5,
        -2.5, 1.0, 0.0, -2.0,
        3.5, 0.0, 1.0, 0.0,
        0.0, 0.0, 0.0, 1.0
    },
    { // pnts
        1.0, 1.0, 1.0, 1.0,
        -1.0, 1.0, 1.0, 1.0,
        1.0, -1.0, 1.0, 1.0,
    },
    { // ref_transformed
        8.5, -3.5, 4.5, 1.0,
        6.5, 1.5, -2.5, 1.0,
        3.5, -5.5, 4.5, 1.0
    }
};

static const SLC_LinePlaner32_TestParams_t r32_lineplane =
{
    // ref plane/line ref point is { 1.5, 1.5, 0.0 }, normal/direction vector = { 0.0, 0.0, -1.0, 1.0 }
    // coordinate in the test plane
    { 1.5f, -1.5f, 0.0f,  1.0f },
    // coordinate in the test line
    { 1.5f, 1.5f, 3.0f,  1.0f },
    // coordinate not in the test plane or the test line.
    { 1.2f, 1.5f, 1.0f,  1.0f },
    { // array of line or planes 
        // [0]: test plane and test line of IsIn methods, and
        // test line of line-plane crosssection and test plane of 2-plane, 3-plane crosssection
        {
            { 1.5f, 1.5f, 0.0f,  1.0f }, { 0.0f, 0.0f, -1.0f,  1.0f }
        },
        // [1]: test plane of line-plane crosssection and the 2nd plane of 2-plane, 3-plane crosssection
        {
            { 1.5f, 1.5f, 0.0f,  1.0f }, { 0.0f, 0.7071f, -.7071f,  1.0f }
        },
        // [2]: test plane of 3-plane crosssection
        {
            { 2.0f, -1.0f, 0.3f,  1.0f }, { 1.0f, 0.0f, 0.0f,  1.0f }
        }
    }
};
static const SLC_LinePlaner64_TestParams_t r64_lineplane =
{
    // ref plane/line ref point is { 1.5, 1.5, 0.0 }, normal/direction vector = { 0.0, 0.0, -1.0, 1.0 }
    // coordinate in the test plane
    { 1.5, -1.5, 0.0,  1.0 },
    // coordinate in the test line
    { 1.5, 1.5, 3.0,  1.0 },
    // coordinate not in the test plane or the test line.
    { 1.2, 1.5, 1.0,  1.0 },
    { // array of line or planes 
        // [0]: test plane and test line of IsIn methods, and
        // test line of line-plane crosssection and test plane of 2-plane, 3-plane crosssection
        {
            { 1.5, 1.5, 0.0,  1.0 }, { 0.0, 0.0, -1.0,  1.0 }
        },
        // [1]: test plane of line-plane crosssection and the 2nd plane of 2-plane, 3-plane crosssection
        {
            { 1.5, 1.5, 0.0,  1.0 }, { 0.0, 0.7071, -.7071,  1.0 }
        },
        // [2]: test plane of 3-plane crosssection
        {
            { 2.0, -1.0, 0.3,  1.0 }, { 1.0, 0.0, 0.0,  1.0 }
        }
    }
};

SLC_errno_t SLC_GeometryUT(SLC_i32_t settings)
{
    SLC_errno_t err = EXIT_SUCCESS;
    SLC_TestArgs_t testargs32 = { 0, &r32_args }, testargs64 = { 0, &r64_args };
    do {
        SLC_test2(err, SLC_r32_GeometryUT, &testargs32, __func__, __LINE__);
        SLC_test2(err, SLC_r64_GeometryUT, &testargs64, __func__, __LINE__);
        testargs32.data = &r32_lineplane;
        testargs64.data = &r64_lineplane;
        SLC_test2(err, SLC_r32_GeometryHLAPIUT, &testargs32, __func__, __LINE__);
        SLC_test2(err, SLC_r64_GeometryHLAPIUT, &testargs64, __func__, __LINE__);
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}