static const CameraUTPolarYDatar32_t _polarYr32_ref =
{
    { 1.0f, 0.0f, 0.0f, 1.0f }, // Nx
    { 0.0001f, 1.0f, 0.0f, 1.0f }, // Ny
    { 0.0f, 0.0f, 1.0f, 1.0f }, // Nz
    { 1.0f, 0.0f, 1.0f, 0.0f, 1.0f }, // Nx in Polar-Y
    { 1.0f, 0.0f, 1.0f, 1.0f, 0.0f }, // Ny in polar-Y
    { 1.0f, 1.0f, 0.0f, 0.0f, 1.0f } // Nz in polar-Y
};

static const CameraUTPolarYDatar64_t _polarYr64_ref =
{
    { 1.0, 0.0, 0.0, 1.0 }, // Nx
    { 0.0000001, 1.0, 0.0, 1.0 }, // Ny
    { 0.0, 0.0, 1.0, 1.0 }, // Nz
    { 1.0, 0.0, 1.0, 0.0, 1.0 }, // Nx in Polar-Y
    { 1.0, 0.0, 1.0, 1.0, 0.0 }, // Ny in polar-Y
    { 1.0, 1.0, 0.0, 0.0, 1.0 } // Nz in polar-Y
};

static const SLC_CameraPositionr32_t _cameraPosr32[] =
{
    {
        { 1.0f, 1.1f, 0.9f, 1.0f }, // CameraIsAt
        { -1.0f, -1.1f, -1.1f, 1.0f }, // CameraLooksAt
        { 0.7071f, -0.7071f }
    },
    {
        { 1.0f, 1.1f, 0.9f, -1.0f }, // CameraIsAt
        { -1.0f, -1.1f, -1.1f, 1.0f }, // CameraLooksAt
        { 0.0f, 1.0f }
    },
    {
        { -1.0f, 1.1f, 0.9f, 1.0f }, // CameraIsAt
        { -1.0f, 1.1f, -1.1f, 1.0f }, // CameraLooksAt
        { -1.0f, 0.0f }
    },
    {
        { 1.0f, -1.1f, 0.9f, -1.0f }, // CameraIsAt
        { 1.0f, -1.1f, 1.1f, 1.0f }, // CameraLooksAt
        { 0.0f, -1.0f }
    }
};

static const SLC_CameraPositionr64_t _cameraPosr64[] =
{
    {
        { 1.0, 1.1, 0.9, 1.0 }, // CameraIsAt
        { -1.0, -1.1, -1.1, 1.0 }, // CameraLooksAt
        { 0.7071, -0.7071 }
    },
    {
        { 1.0, 1.1, 0.9, -1.0 }, // CameraIsAt
        { -1.0, -1.1, -1.1, 1.0 }, // CameraLooksAt
        { 0.0, 1.0 }
    },
    {
        { -1.0, 1.1, 0.9, 1.0 }, // CameraIsAt
        { -1.0, 1.1, -1.1, 1.0 }, // CameraLooksAt
        { -1.0, 0.0 }
    },
    {
        { 1.0, -1.1, 0.9, -1.0 }, // CameraIsAt
        { 1.0, -1.1, 1.1, 1.0 }, // CameraLooksAt
        { 0.0, -1.0 }
    }
};

SLC_errno_t SLC_CameraUT(SLC_i32_t settings)
{
    SLC_errno_t err = EXIT_SUCCESS;
    SLC_TestArgs_t testargs32 = { 0, &_polarYr32_ref }, testargs64 = { 0, &_polarYr64_ref };
    do {
        // polar-Y <==> cartesian conversion
        SLC_test2(err, SLC_r32_PolarYUT, &testargs32, __func__, __LINE__);
        SLC_test2(err, SLC_r64_PolarYUT, &testargs64, __func__, __LINE__);

        // camera direction transform
        testargs32.data = _cameraPosr32;
        testargs64.data = _cameraPosr64;
        SLC_test2(err, SLC_r32_CameraDirectionUT, &testargs32, __func__, __LINE__);
        SLC_test2(err, SLC_r64_CameraDirectionUT, &testargs64, __func__, __LINE__);

        // camera position matrix
        SLC_test2(err, SLC_r32_CameraPositionUT, &testargs32, __func__, __LINE__);
        SLC_test2(err, SLC_r64_CameraPositionUT, &testargs64, __func__, __LINE__);

        // Orth-normal projection

        // Perspective projection
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}