#pragma region Unit_tests_for_MiniLA_with_base_number_type_SLC_<NTID>_t
#pragma region basic_matrix_operations
typedef struct {
    SLC_4i16_t size;
    SLC_<NTID>_t mat0[16], mat1[16];
    SLC_<NTID>_t matsum[16], matprod[16], scaled[16], scaledsum[16];
    SLC_<NTID>_t mattranspose[16], matinv[16];
    SLC_<RTID>_t tolerance;
    SLC_<NTID>_t scale0, scale1;
} <NTID>_MiniLAUTParams_t, *<NTID>_PMiniLAUTParams_t;
typedef const <NTID>_MiniLAUTParams_t *<NTID>_PCMiniLAUTParams_t;

SLC_errno_t SLC_Mat<NTID>_AddUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLAUTParams_t params = (<NTID>_PCMiniLAUTParams_t)(args->data);
    SLC_PArray_t mat0 = SLC_Array_Alloc(params->size);
    SLC_PArray_t mat1 = SLC_Array_Alloca(params->size);
    SLC_PArray_t matsum = SLC_Array_Alloca(params->size);
    do {
        SLC_<NTID>_copy(mat0->data._ptr, 1, params->mat0, 1, SLC_ARRAYSIZE(params->mat0));
        SLC_<NTID>_copy(mat1->data._ptr, 1, params->mat1, 1, SLC_ARRAYSIZE(params->mat1));
        SLC_Mat<NTID>_Add(matsum, mat0, mat1);
        SLC_i16_t rows = SLC_Array_MatRows(mat0), columns = SLC_Array_MatColumns(mat0);
        for (SLC_i16_t row=0; row < rows; row++)
        {
            for (SLC_i16_t column = 0; column < columns; column++)
            {
                SLC_size_t index = column + row * columns;
                if (!SLC_<NTID>_areequal(params->matsum[index], matsum->data._<NTID>[index], params->tolerance))
                {
                    err = EXIT_FAILURE;
                    SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                    break;
                }
            }
            if (err) break;
        }
    } while (0);
    free(mat0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}

SLC_errno_t SLC_Mat<NTID>_ScaleAddUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLAUTParams_t params = (<NTID>_PCMiniLAUTParams_t)(args->data);
    SLC_PArray_t mat0 = SLC_Array_Alloc(params->size);
    SLC_PArray_t mat1 = SLC_Array_Alloca(params->size);
    SLC_PArray_t matScaleAdd = SLC_Array_Alloca(params->size);
    do {
        SLC_<NTID>_copy(mat0->data._ptr, 1, params->mat0, 1, SLC_ARRAYSIZE(params->mat0));
        SLC_<NTID>_copy(mat1->data._ptr, 1, params->mat1, 1, SLC_ARRAYSIZE(params->mat1));
        SLC_Mat<NTID>_ScaleAdd(matScaleAdd, mat0, &params->scale0, mat1, &params->scale1);
        SLC_i16_t rows = SLC_Array_MatRows(mat0), columns = SLC_Array_MatColumns(mat0);
        for (SLC_i16_t row=0; row < rows; row++)
        {
            for (SLC_i16_t column = 0; column < columns; column++)
            {
                SLC_size_t index = column + row * columns;
                if (!SLC_<NTID>_areequal(params->scaledsum[index], matScaleAdd->data._<NTID>[index], params->tolerance))
                {
                    err = EXIT_FAILURE;
                    SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                    break;
                }
            }
            if (err) break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    free(mat0);
    return err;
}

SLC_errno_t SLC_Mat<NTID>_ScaleUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLAUTParams_t params = (<NTID>_PCMiniLAUTParams_t)(args->data);
    SLC_PArray_t mat0 = SLC_Array_Alloc(params->size);
    SLC_PArray_t matScaled = SLC_Array_Alloca(params->size);
    do {
        SLC_<NTID>_copy(mat0->data._ptr, 1, params->mat0, 1, SLC_ARRAYSIZE(params->mat0));
        SLC_Mat<NTID>_Scale(matScaled, mat0, &params->scale0);
        SLC_i16_t rows = SLC_Array_MatRows(mat0), columns = SLC_Array_MatColumns(mat0);
        for (SLC_i16_t row=0; row < rows; row++)
        {
            for (SLC_i16_t column = 0; column < columns; column++)
            {
                SLC_size_t index = column + row * columns;
                if (!SLC_<NTID>_areequal(params->scaled[index], matScaled->data._<NTID>[index], params->tolerance))
                {
                    err = EXIT_FAILURE;
                    SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                    break;
                }
            }
            if (err) break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    free(mat0);
    return err;
}

SLC_errno_t SLC_Mat<NTID>_MulUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLAUTParams_t params = (<NTID>_PCMiniLAUTParams_t)(args->data);
    SLC_PArray_t mat0 = SLC_Array_Alloc(params->size);
    SLC_PArray_t mat1 = SLC_Array_Alloca(params->size);
    SLC_PArray_t matProd = SLC_Array_Alloc(params->size);
    SLC_PArray_t matWork = SLC_Array_Alloc(params->size);
    do {
        SLC_<NTID>_copy(mat0->data._ptr, 1, params->mat0, 1, SLC_ARRAYSIZE(params->mat0));
        SLC_<NTID>_copy(mat1->data._ptr, 1, params->mat1, 1, SLC_ARRAYSIZE(params->mat1));
        SLC_Mat<NTID>_Mul(matProd, mat0, mat1, matWork);
        SLC_i16_t rows = SLC_Array_MatRows(mat0), columns = SLC_Array_MatColumns(mat0);
        for (SLC_i16_t row=0; row < rows; row++)
        {
            for (SLC_i16_t column = 0; column < columns; column++)
            {
                SLC_size_t index = column + row * columns;
                if (!SLC_<NTID>_areequal(params->matprod[index], matProd->data._<NTID>[index], params->tolerance))
                {
                    err = EXIT_FAILURE;
                    SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                    break;
                }
            }
            if (err) break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    free(mat0);
    free(matProd);
    free(matWork);
    return err;
}

SLC_errno_t SLC_Mat<NTID>_TransConjUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLAUTParams_t params = (<NTID>_PCMiniLAUTParams_t)(args->data);
    SLC_PArray_t mat0 = SLC_Array_Alloc(params->size);
    SLC_PArray_t matTC = SLC_Array_Alloca(params->size);
    do {
        SLC_<NTID>_copy(mat0->data._ptr, 1, params->mat0, 1, SLC_ARRAYSIZE(params->mat0));
        SLC_Mat<NTID>_TransConj(matTC, mat0);
        SLC_i16_t rows = SLC_Array_MatRows(mat0), columns = SLC_Array_MatColumns(mat0);
        for (SLC_i16_t row=0; row < rows; row++)
        {
            for (SLC_i16_t column = 0; column < columns; column++)
            {
                SLC_size_t index = column + row * columns;
                if (!SLC_<NTID>_areequal(SLC_<NTID>_conj(params->mattranspose[index]), matTC->data._<NTID>[index], params->tolerance))
                {
                    err = EXIT_FAILURE;
                    SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                    break;
                }
            }
            if (err) break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    free(mat0);
    return err;
}

SLC_errno_t SLC_Mat<NTID>_InvUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLAUTParams_t params = (<NTID>_PCMiniLAUTParams_t)(args->data);
    SLC_PArray_t mat0 = SLC_Array_Alloc(params->size);
    SLC_4i16_t worksize = SLC_InvMatWorkSize(params->size);
    SLC_PArray_t matWork = SLC_Array_Alloca(worksize);
    SLC_PArray_t matinv = SLC_Array_Alloca(params->size);
    do {
        SLC_<NTID>_copy(mat0->data._ptr, 1, params->mat0, 1, SLC_ARRAYSIZE(params->mat0));
        SLC_Mat<NTID>_Inv(matinv, mat0, matWork);
        SLC_i16_t rows = SLC_Array_MatRows(mat0), columns = SLC_Array_MatColumns(mat0);
        for (SLC_i16_t row=0; row < rows; row++)
        {
            for (SLC_i16_t column = 0; column < columns; column++)
            {
                SLC_size_t index = column + row * columns;
                if (!SLC_<NTID>_areequal(params->matinv[index], matinv->data._<NTID>[index], params->tolerance))
                {
                    err = EXIT_FAILURE;
                    SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                    break;
                }
            }
            if (err) break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    free(mat0);
    return err;
}

SLC_errno_t SLC_<NTID>_MiniLAUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLAUTParams_t params = (<NTID>_PCMiniLAUTParams_t)(args->data);
    do {
        SLC_test2(err, SLC_Mat<NTID>_AddUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_Mat<NTID>_ScaleAddUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_Mat<NTID>_ScaleUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_Mat<NTID>_MulUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_Mat<NTID>_TransConjUT, args, __func__, __LINE__);
        SLC_test2(err, SLC_Mat<NTID>_InvUT, args, __func__, __LINE__);
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}
#pragma endregion basic_matrix_operations
#pragma region linear_equation_solvers
typedef struct {
    SLC_4i16_t sizeL, sizeX;
    SLC_<NTID>_t matL0[16], matL1[16], X[8];
} <NTID>_MiniLASolverUTParams_t, *<NTID>_PMiniLASolverUTParams_t;
typedef const <NTID>_MiniLASolverUTParams_t *<NTID>_PCMiniLASolverUTParams_t;

SLC_errno_t SLC_<NTID>_MiniLASolveUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    <NTID>_PCMiniLASolverUTParams_t params = (<NTID>_PCMiniLASolverUTParams_t)(args->data);
    SLC_4i16_t work2size = SLC_TransposedMatSize(params->sizeX);
    SLC_4i16_t worksize = SLC_SolveWorkSize(params->sizeL, params->sizeX);
    SLC_PArray_t L = SLC_Array_Alloc(params->sizeL);
    SLC_PArray_t R = SLC_Array_Alloc(params->sizeX);
    SLC_PArray_t X = SLC_Array_Alloc(params->sizeX);
    SLC_PArray_t work = SLC_Array_Alloc(worksize);
    SLC_PArray_t work2 = SLC_Array_Alloc(work2size);
    SLC_i16_t rows = params->sizeL[2], columns = params->sizeL[1];
    SLC_<NTID>_copy(L->data._<NTID>, 1, params->matL0, 1, (SLC_size_t)rows * (SLC_size_t)columns);
    SLC_<NTID>_copy(X->data._<NTID>, 1, params->X, 1, (SLC_size_t)rows * (SLC_size_t)SLC_Array_MatColumns(X));
    do {
        // create R
        SLC_Mat<NTID>_Mul(R, L, X, work2);
        // clear X
        SLC_<NTID>_set0(X->data._<NTID>, 1, (SLC_size_t)rows * (SLC_size_t)SLC_Array_MatColumns(X));
        // solve the equation L * X = R
        SLC_Mat<NTID>_Solve(X, L, R, work);
        for (SLC_i16_t row = 0; row < SLC_Array_MatRows(X); row++)
        {
            for (SLC_i16_t column = 0; column < SLC_Array_MatColumns(X); column++)
            {
                SLC_size_t index = (SLC_size_t)column + (SLC_size_t)SLC_Array_MatColumns(X) * (SLC_size_t)row;
                if (!SLC_<NTID>_areequal(params->X[index], X->data._<NTID>[index], SLC_<NTID>_stdtol))
                {
                    err = EXIT_FAILURE;
                    SLC_LogERR(err, "@ %s,%d\n", __func__, __LINE__);
                    break;
                }
            }
            if (err) break;
        }
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    free(L);
    free(R);
    free(X);
    free(work);
    return err;
}

SLC_errno_t SLC_<NTID>_MiniLASolverUT(SLC_PCTestArgs_t args)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        SLC_test2(err, SLC_<NTID>_MiniLASolveUT, args, __func__, __LINE__);
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}
#pragma endregion linear_equation_solvers
#pragma endregion Unit_tests_for_MiniLA_with_base_number_type_SLC_<NTID>_t