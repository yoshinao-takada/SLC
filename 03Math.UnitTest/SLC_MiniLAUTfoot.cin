r32_MiniLAUTParams_t r32_LAparams = {

};

r64_MiniLAUTParams_t r64_LAparams = {

};

c64_MiniLAUTParams_t c64_LAparams = {

};

c128_MiniLAUTParams_t c128_LAparams = {

};

r32_MiniLASolverUTParams_t r32_LAparams2 = {

};

r64_MiniLASolverUTParams_t r64_LAparams2 = {

};

c64_MiniLASolverUTParams_t c64_LAparams2 = {

};

c128_MiniLASolverUTParams_t c128_LAparams2 = {

};

SLC_errno_t SLC_MiniLAUT(SLC_i32_t settings)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        SLC_TestArgs_t r32_args = { 0, &r32_LAparams };
        SLC_TestArgs_t r64_args = { 0, &r64_LAparams };
        SLC_TestArgs_t c64_args = { 0, &c64_LAparams };
        SLC_TestArgs_t c128_args = { 0, &c128_LAparams };
        SLC_test2(err, SLC_r32_MiniLAUT, &r32_args, __func__, __LINE__);
        SLC_test2(err, SLC_r64_MiniLAUT, &r64_args, __func__, __LINE__);
        SLC_test2(err, SLC_c64_MiniLAUT, &c64_args, __func__, __LINE__);
        SLC_test2(err, SLC_c128_MiniLAUT, &c128_args, __func__, __LINE__);

        r32_args.data = &r32_LAparams2;
        r64_args.data = &r64_LAparams2;
        c64_args.data = &c64_LAparams2;
        c128_args.data = &c128_LAparams2;
        SLC_test2(err, SLC_r32_MiniLASolverUT, &r32_args, __func__, __LINE__);
        SLC_test2(err, SLC_r64_MiniLASolverUT, &r64_args, __func__, __LINE__);
        SLC_test2(err, SLC_c64_MiniLASolverUT, &c64_args, __func__, __LINE__);
        SLC_test2(err, SLC_c128_MiniLASolverUT, &c128_args, __func__, __LINE__);
    } while (0);
    SLC_testend(err, __func__, __LINE__);
    return err;
}