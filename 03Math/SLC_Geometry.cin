#pragma region <NTID>_function_impl
bool SLC_Pnt<NTID>_areequal(SLC_CPnt<NTID>_t p0, SLC_CPnt<NTID>_t p1, SLC_<NTID>_t tol)
{
    bool b = true;
    for (int i = 0; i < 3; i++)
    {
        b &= SLC_<NTID>_areequal(p0[i]/p0[3], p1[i]/p1[3], tol);
    }
    return b;
}

#pragma region matrix_multiplication
// 4x4 identity matrix
const SLC_CTMat<NTID>_t SLC_TMat<NTID>_IMat() { return (const SLC_TMat<NTID>_t)IMat_<NTID>; }

SLC_CTMat<NTID>_t SLC_TMat<NTID>_Mul(
    SLC_CTMat<NTID>_t mleft, SLC_CTMat<NTID>_t mright, SLC_TMat<NTID>_t mprod
) {
    for (SLC_size_t row = 0; row < 4; row++)
    {
        const SLC_<NTID>_t* _mright = mright;
        for (SLC_size_t column = 0; column < 4; column ++)
        {
            *mprod =
                mleft[0] * _mright[0] + mleft[1] * _mright[4] +
                mleft[2] * _mright[8] + mleft[3] * _mright[12];
            _mright++;
            mprod++;
        }
        mleft += 4;
    }
    return mprod-16;
}

#define MATSIZE4X4 { sizeof(SLC_<NTID>_t), 4, 4, 1 }
#define MATSIZE5X8 { sizeof(SLC_<NTID>_t), 8, 5, 1 }
SLC_CTMat<NTID>_t SLC_TMat<NTID>_Inv(SLC_CTMat<NTID>_t m, SLC_TMat<NTID>_t minv)
{
    SLC_4i16_t worksize = MATSIZE5X8;
    SLC_Array_t _m = { { MATSIZE4X4 }, { m } };
    SLC_Array_t _minv = { { MATSIZE4X4 }, { minv } };
    SLC_PArray_t _mwork = SLC_Array_Alloca(worksize);
    SLC_errno_t err = SLC_Mat<NTID>_Inv(&_minv, &_m, _mwork);
    return err ? NULL : minv;
}

const SLC_<NTID>_t* SLC_TMat<NTID>_Transform(
    SLC_CTMat<NTID>_t m, const SLC_<NTID>_t* original, SLC_<NTID>_t* transformed
) {
    transformed[0] = m[0] * original[0] + m[1] * original[1] + m[2] * original[2] + m[3] * original[3];
    transformed[1] = m[4] * original[0] + m[5] * original[1] + m[6] * original[2] + m[7] * original[3];
    transformed[2] = m[8] * original[0] + m[9] * original[1] + m[10] * original[2] + m[11] * original[3];
    transformed[3] = m[12] * original[0] + m[13] * original[1] + m[14] * original[2] + m[15] * original[3];
    return transformed;
}

const SLC_<NTID>_t* SLC_TMat<NTID>_MultiTransform(
    SLC_CTMat<NTID>_t m, const SLC_<NTID>_t* original, SLC_<NTID>_t* transformed, SLC_size_t count
) {
    const SLC_<NTID>_t* _original = original;
    SLC_<NTID>_t* _transformed = transformed;
    for (SLC_size_t i = 0; i < count; i++)
    {
        SLC_TMat<NTID>_Transform(m, _original, _transformed);
        _original += 4;
        _transformed += 4;
    }
    return transformed;
}
#pragma endregion matrix_multiplication

#pragma region rotation_matrix
SLC_CTMat<NTID>_t SLC_TMat<NTID>_rotateZ(SLC_<NTID>_t c, SLC_<NTID>_t s, SLC_<NTID>_t* result)
{
    memcpy(result, IMat_<NTID>, sizeof(IMat_<NTID>));
    result[0] = result[5] = c;
    result[1] = -(result[4] = s);
    return result;
}

SLC_CTMat<NTID>_t SLC_TMat<NTID>_rotateX(SLC_<NTID>_t c, SLC_<NTID>_t s, SLC_<NTID>_t* result)
{
    memcpy(result, IMat_<NTID>, sizeof(IMat_<NTID>));
    result[5] = result[10] = c;
    result[6] = -(result[9] = s);
    return result;
}

SLC_CTMat<NTID>_t SLC_TMat<NTID>_rotateY(SLC_<NTID>_t c, SLC_<NTID>_t s, SLC_<NTID>_t* result)
{
    memcpy(result, IMat_<NTID>, sizeof(IMat_<NTID>));
    result[0] = result[10] = c;
    result[8] = -(result[2] = s);
    return result;
}
#pragma endregion rotation_matrix

#pragma region polar_cartesian_conversion
void SLC_PolarFromCartesian<NTID>(SLC_PPolar<NTID>_t polar, SLC_CPnt<NTID>_t cartesian)
{
    SLC_<NTID>_t _w = SLC_<NTID>_units[1]/cartesian[3];
    SLC_3<NTID>_t xyz = { _w * cartesian[0], _w * cartesian[1], _w * cartesian[2] };
    SLC_<NTID>_t Rh = SLC_<NTID>sqrt(xyz[0]*xyz[0] + xyz[1]*xyz[1]);
    polar->r = SLC_<NTID>sqrt(xyz[0]*xyz[0] + xyz[1]*xyz[1] + xyz[2]*xyz[2]);
    polar->cphi = xyz[0]/Rh;
    polar->sphi = xyz[1]/Rh;
    polar->ctheta = Rh/polar->r;
    polar->stheta = xyz[2]/polar->r;
}

void SLC_PolarToCartesian<NTID>(SLC_Pnt<NTID>_t cartesian, SLC_PCPolar<NTID>_t polar)
{
    cartesian[0] = polar->r * polar->ctheta * polar->cphi;
    cartesian[1] = polar->r * polar->ctheta * polar->sphi;
    cartesian[2] = polar->r * polar->stheta;
    cartesian[3] = SLC_<NTID>_units[1];
}

void SLC_PolarYFromCartesian<NTID>(SLC_PPolar<NTID>_t polar, SLC_CPnt<NTID>_t cartesian)
{
    SLC_<NTID>_t _w = SLC_<NTID>_units[1] / cartesian[3];
    SLC_3<NTID>_t xyz = { _w * cartesian[0], _w * cartesian[1], _w * cartesian[2] };
    SLC_<NTID>_t Rh = SLC_<NTID>sqrt(xyz[0]*xyz[0] + xyz[2]*xyz[2]);
    polar->r = SLC_<NTID>sqrt(xyz[0]*xyz[0] + xyz[1]*xyz[1] + xyz[2]*xyz[2]);
    polar->cphi = xyz[2]/Rh;
    polar->sphi = xyz[0]/Rh;
    polar->ctheta = xyz[1]/polar->r;
    polar->stheta = Rh/polar->r;
}

void SLC_PolarYToCartesian<NTID>(SLC_Pnt<NTID>_t cartesian, SLC_PCPolar<NTID>_t polar)
{
    cartesian[2] = polar->r * polar->stheta * polar->cphi;
    cartesian[0] = polar->r * polar->stheta * polar->sphi;
    cartesian[1] = polar->r * polar->ctheta;
    cartesian[3] = SLC_<NTID>_units[1];
}
#pragma region polar_cartesian_conversion
SLC_CVec<NTID>_t SLC_Vec<NTID>_CrossProduct(SLC_CVec<NTID>_t x0, SLC_CVec<NTID>_t x1, SLC_Vec<NTID>_t result)
{
    result[0] = x0[1] * x1[2] - x1[1] * x0[2];
    result[1] = x0[2] * x1[0] - x1[2] * x0[0];
    result[2] = x0[0] * x1[1] - x1[0] * x0[1];
    result[3] = x0[3] * x1[3];
    return result;
}
#pragma region printing
void SLC_TMat<NTID>_Print(FILE* out, SLC_CTMat<NTID>_t mat)
{
    for (int row = 0; row < 4; row++)
    {
        for (int column = 0; column < 4; column++)
        {
            const char* delimiter = (column == 0) ? "" : ", ";
            SLC_<NTID>_print(out, delimiter, mat[column + row*4]);
        }
        fprintf(out, "\n");
    }
}

void SLC_Pnt<NTID>_Print(FILE* out, SLC_CPnt<NTID>_t pnt)
{
    SLC_<NTID>_print(out, "", pnt[0]);
    SLC_<NTID>_print(out, ", ", pnt[1]);
    SLC_<NTID>_print(out, ", ", pnt[2]);
    SLC_<NTID>_print(out, ", ", pnt[3]);
    SLC_<NTID>_print(out, ",(", pnt[0]/pnt[3]);
    SLC_<NTID>_print(out, ", ", pnt[1]/pnt[3]);
    SLC_<NTID>_print(out, ", ", pnt[2]/pnt[3]);
    fprintf(out, ")\n");
}

void SLC_Vec<NTID>_Print(FILE* out, SLC_CVec<NTID>_t vec)
{
    SLC_<NTID>_print(out, "", vec[0]);
    SLC_<NTID>_print(out, ", ", vec[1]);
    SLC_<NTID>_print(out, ", ", vec[2]);
    SLC_<NTID>_print(out, ", ", vec[3]);
    SLC_<NTID>_print(out, ",(", vec[0]/vec[3]);
    SLC_<NTID>_print(out, ", ", vec[1]/vec[3]);
    SLC_<NTID>_print(out, ", ", vec[2]/vec[3]);
    fprintf(out, ")\n");
}

SLC_<NTID>_t SLC_Vec<NTID>_InnerProduct(SLC_CVec<NTID>_t v0, SLC_CVec<NTID>_t v1)
{
    SLC_<NTID>_t normalizer = SLC_<NTID>_units[1] / (v0[3] * v1[3]);
    return normalizer * (v0[0] * v1[0] + v0[1] * v1[1] + v0[2] * v1[2]);
}

SLC_errno_t SLC_Vec<NTID>_Normalize(SLC_Vec<NTID>_t vnormalized, SLC_CVec<NTID>_t vsrc)
{
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        SLC_<NTID>_t L2norm = SLC_<NTID>sqrt(SLC_Vec<NTID>_InnerProduct(vsrc, vsrc));
        if (L2norm < SLC_<NTID>_stdtol)
        {
            err = SLC_ESINGULAR;
            break;
        }
        SLC_<NTID>_t normalizer = SLC_<NTID>_units[1] / (L2norm * vsrc[3]);
        vnormalized[0] = vsrc[0] * normalizer;
        vnormalized[1] = vsrc[1] * normalizer;
        vnormalized[2] = vsrc[2] * normalizer;
        vnormalized[3] = SLC_<NTID>_units[1];
    } while (0);
    return err;
}

void SLC_Vec<NTID>_Vector(SLC_Vec<NTID>_t v, SLC_CPnt<NTID>_t pbegin, SLC_CPnt<NTID>_t pend)
{
    const SLC_<NTID>_t _1 = SLC_<NTID>_units[1];
    const SLC_<NTID>_t pbegin_normalizer = _1 / pbegin[3];
    const SLC_<NTID>_t pend_normalizer = _1 / pend[3];
    v[0] = pend_normalizer * pend[0] - pbegin_normalizer * pbegin[0];
    v[1] = pend_normalizer * pend[1] - pbegin_normalizer * pbegin[1];
    v[2] = pend_normalizer * pend[2] - pbegin_normalizer * pbegin[2];
    v[3] = _1;
}

#pragma endregion printing
#pragma region high-level_geometry_functions
/*!
\brief Create a line object from two 3D points in homobeneous coordinate
\param line [out] line object
\param p0 [in] a point
\param p1 [in] another point
\return SLC_ESINGULAR if p0 and p1 are too close.
*/
SLC_errno_t SLC_Line<NTID>_Property
(SLC_PLinePlane<NTID>_t line, const SLC_Pnt<NTID>_t p0, const SLC_Pnt<NTID>_t p1)
{
    SLC_COPY4(line->p0, p0);
    SLC_Vec<NTID>_t p1p0;
    SLC_Vec<NTID>_Vector(p1p0, p0, p1);
    return SLC_Vec<NTID>_Normalize(line->v0, p1p0);
}

/*!
\brief Create a plane object from three 3D points in homobeneous coordinate
\param plane [out] plane object
\param p0 [in] a point
\param p1 [in] another point
\param p2 [in] 2nd another point
\return SLC_ESINGULAR if |(p1-p0)x(p2-p0)| is too small
*/
SLC_errno_t SLC_Plane<NTID>_Property
(SLC_PLinePlane<NTID>_t plane, const SLC_Pnt<NTID>_t p0, const SLC_Pnt<NTID>_t p1, const SLC_Pnt<NTID>_t p2)
{
    SLC_Vec<NTID>_t p0p1, p0p2, p0p1_x_p0p2;
    SLC_Vec<NTID>_Vector(p0p1, p0, p1);
    SLC_Vec<NTID>_Vector(p0p2, p0, p2);
    SLC_Vec<NTID>_CrossProduct(p0p1, p0p2, p0p1_x_p0p2);
    SLC_COPY4(plane->p0, p0);
    return SLC_Vec<NTID>_Normalize(plane->v0, p0p1_x_p0p2);
}

SLC_bool_t SLC_Line<NTID>_IsIn(SLC_PCLinePlane<NTID>_t line, SLC_CPnt<NTID>_t pnt, SLC_<NTID>_t tol)
{
    SLC_<NTID>_t _1 = SLC_<NTID>_units[1];
    SLC_<NTID>_t pnt_scaling = _1 / pnt[3];
    SLC_<NTID>_t p0_scaling = _1 / line->p0[3];
    SLC_4<NTID>_t pnt_p0 = 
    {
        pnt[0] * pnt_scaling - line->p0[0] * p0_scaling,
        pnt[1] * pnt_scaling - line->p0[1] * p0_scaling,
        pnt[2] * pnt_scaling - line->p0[2] * p0_scaling,
        _1
    };
    SLC_<NTID>_t pnt_p0_length = SLC_<NTID>sqrt(SLC_Vec<NTID>_InnerProduct(pnt_p0, pnt_p0));
    if (pnt_p0_length < tol)
    {
        return true;
    }
    SLC_<NTID>_t normalizer = _1 / pnt_p0_length;
    pnt_p0[0] *= normalizer;
    pnt_p0[1] *= normalizer;
    pnt_p0[2] *= normalizer;
    SLC_<NTID>_t discrimination_param = SLC_Vec<NTID>_InnerProduct(pnt_p0, line->v0);
    return (SLC_<NTID>_abs(discrimination_param - _1) < tol) ||
        (SLC_<NTID>_abs(discrimination_param + _1) < tol);
}

void SLC_LinePlane<NTID>_Print(FILE* out, SLC_PCLinePlane<NTID>_t lineplane)
{
    fprintf(out, "Line-Plane:\n\tp0: ");
    SLC_Vec<NTID>_Print(out, lineplane->p0);
    fprintf(out, ",\n\tv0: ");
    SLC_Vec<NTID>_Print(out, lineplane->p0);
    fprintf(out, "\n");
}

SLC_bool_t SLC_Plane<NTID>_IsIn(SLC_PCLinePlane<NTID>_t plane, SLC_CPnt<NTID>_t pnt, SLC_<NTID>_t tol)
{
    SLC_<NTID>_t _1 = SLC_<NTID>_units[1];
    SLC_<NTID>_t pnt_scaling = _1 / pnt[3];
    SLC_<NTID>_t p0_scaling = _1 / plane->p0[3];
    SLC_4<NTID>_t pnt_p0 = 
    {
        pnt[0] * pnt_scaling - plane->p0[0] * p0_scaling,
        pnt[1] * pnt_scaling - plane->p0[1] * p0_scaling,
        pnt[2] * pnt_scaling - plane->p0[2] * p0_scaling,
        _1
    };
    SLC_<NTID>_t pnt_p0_length = SLC_<NTID>sqrt(SLC_Vec<NTID>_InnerProduct(pnt_p0, pnt_p0));
    if (pnt_p0_length < tol)
    {
        return true;
    }
    SLC_<NTID>_t normalizer = _1 / pnt_p0_length;
    pnt_p0[0] *= normalizer;
    pnt_p0[1] *= normalizer;
    pnt_p0[2] *= normalizer;
    SLC_<NTID>_t discrimination_param = SLC_Vec<NTID>_InnerProduct(pnt_p0, plane->v0);
    return SLC_<NTID>_abs(discrimination_param) < tol;
}

SLC_errno_t SLC_LinePlane<NTID>_Crosssection(
    SLC_PCLinePlane<NTID>_t line, SLC_PCLinePlane<NTID>_t plane, SLC_Pnt<NTID>_t cross)
{
    const SLC_<NTID>_t _1 = SLC_<NTID>_units[1];
    SLC_errno_t err = EXIT_SUCCESS;
    do {
        SLC_<NTID>_t a;
        SLC_4<NTID>_t p1_p0;
        SLC_<NTID>_t DN = SLC_Vec<NTID>_InnerProduct(line->v0, plane->v0);
        if (SLC_<NTID>_abs(DN) < SLC_<NTID>_stdtol)
        { // line and plane are nearly parallel.
            err = SLC_ESINGULAR;
            break;
        }
        p1_p0[0] = plane->p0[0] * line->p0[3] - line->p0[0] * plane->p0[3];
        p1_p0[1] = plane->p0[1] * line->p0[3] - line->p0[1] * plane->p0[3];
        p1_p0[2] = plane->p0[2] * line->p0[3] - line->p0[2] * plane->p0[3];
        p1_p0[3] = plane->p0[3] * line->p0[3];
        a = SLC_Vec<NTID>_InnerProduct(p1_p0, plane->v0) / DN;
        { // calc crosssection coordinate
            SLC_<NTID>_t normalizerP0 = _1 / line->p0[3];
            SLC_<NTID>_t normalizerD = _1 / line->v0[3];
            cross[0] = normalizerP0 * line->p0[0] + a * normalizerD * line->v0[0];
            cross[1] = normalizerP0 * line->p0[1] + a * normalizerD * line->v0[1];
            cross[2] = normalizerP0 * line->p0[2] + a * normalizerD * line->v0[2];
            cross[3] = _1;
        }
    } while (0);
    return err;
}

SLC_errno_t SLC_Plane<NTID>_2Crosssection(SLC_PCLinePlane<NTID>_t planes, SLC_PLinePlane<NTID>_t cross)
{
    SLC_errno_t err = EXIT_SUCCESS;
    SLC_LinePlane<NTID>_t _3planes[3];
    do {
        memcpy(_3planes, planes, 2 * sizeof(SLC_LinePlane<NTID>_t));
        SLC_Vec<NTID>_CrossProduct(planes[0].v0, planes[1].v0, _3planes[2].v0);
        SLC_COPY4(_3planes[2].p0, planes[0].p0);
        err = SLC_Plane<NTID>_3Crosssection(_3planes, cross->p0);
        SLC_COPY4(cross->v0, _3planes[2].v0)
    } while (0);
    return err;
}

SLC_errno_t SLC_Plane<NTID>_3Crosssection(SLC_PCLinePlane<NTID>_t planes, SLC_Pnt<NTID>_t cross)
{
    const SLC_<NTID>_t _1 = SLC_<NTID>_units[1];
    SLC_errno_t err = EXIT_SUCCESS;
    SLC_4i16_t left_size = { sizeof(SLC_<NTID>_t), 3, 3, 1 }, right_size = { sizeof(SLC_<NTID>_t), 1, 3, 1 };
    SLC_4i16_t work_size = SLC_SolveWorkSize(left_size, right_size);
    SLC_PArray_t left = SLC_Array_Alloca(left_size), right = SLC_Array_Alloca(right_size),
        work = SLC_Array_Alloca(work_size);
    SLC_Array_t px = { { sizeof(SLC_<NTID>_t), 1, 3, 1 }, { cross } };
    do {
        left->data._<NTID>[0] = planes[0].v0[0];
        left->data._<NTID>[1] = planes[0].v0[1];
        left->data._<NTID>[2] = planes[0].v0[2];
        left->data._<NTID>[3] = planes[1].v0[0];
        left->data._<NTID>[4] = planes[1].v0[1];
        left->data._<NTID>[5] = planes[1].v0[2];
        left->data._<NTID>[6] = planes[2].v0[0];
        left->data._<NTID>[7] = planes[2].v0[1];
        left->data._<NTID>[8] = planes[2].v0[2];
        right->data._<NTID>[0] = SLC_Vec<NTID>_InnerProduct(planes[0].p0, planes[0].v0);
        right->data._<NTID>[1] = SLC_Vec<NTID>_InnerProduct(planes[1].p0, planes[1].v0);
        right->data._<NTID>[2] = SLC_Vec<NTID>_InnerProduct(planes[2].p0, planes[2].v0);
        SLC_Mat<NTID>_Solve(&px, left, right, work);
        cross[3] = _1;
    } while (0);
    return err;
}
#pragma endregion high-level_geometry_functions
#undef MATSIZE4X4
#undef MATSIZE5X8
#pragma endregion <NTID>_function_impl