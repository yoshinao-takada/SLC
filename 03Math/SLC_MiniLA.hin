#pragma region <NTID>_functions
void SLC_Mat<NTID>_Add(SLC_PArray_t dst, SLC_PArray_t src0, SLC_PArray_t src1);
void SLC_Mat<NTID>_ScaleAdd(SLC_PArray_t dst, SLC_PArray_t src0, const SLC_<NTID>_t* scale0,
    SLC_PArray_t src1, const SLC_<NTID>_t* scale1);
void SLC_Mat<NTID>_Scale(SLC_PArray_t dst, SLC_PArray_t src, const SLC_<NTID>_t *scale);
void SLC_Mat<NTID>_Mul(SLC_PArray_t dst, SLC_PArray_t src0, SLC_PArray_t src1, SLC_PArray_t work);
void SLC_Mat<NTID>_Transpose(SLC_PArray_t dst, SLC_PArray_t src);
void SLC_Mat<NTID>_TransConj(SLC_PArray_t dst, SLC_PArray_t src);
SLC_errno_t SLC_Mat<NTID>_Inv(SLC_PArray_t dst, SLC_PArray_t src, SLC_PArray_t work);
// solve fully determined linear equation
// left * dst = right,
// left, right: known matrix
// dst: unknown solution
SLC_errno_t SLC_Mat<NTID>_Solve(
    SLC_PArray_t dst, SLC_PArray_t left, SLC_PArray_t right, SLC_PArray_t work);
SLC_errno_t SLC_Mat<NTID>_EasySolve(SLC_PArray_t dst, SLC_PArray_t left, SLC_PArray_t right);

// solve overdetermined linear equation
SLC_errno_t SLC_Mat<NTID>_EasySolveOD(SLC_PArray_t dst, SLC_PArray_t left, SLC_PArray_t right);
SLC_errno_t SLC_Mat<NTID>_SolveOD(SLC_PArray_t dst, SLC_PArray_t left, SLC_PArray_t right,
    SLC_PArray_t leftT, SLC_PArray_t leftTC, SLC_PArray_t leftTC_left,
    SLC_PArray_t rightT, SLC_PArray_t leftTC_right,
    SLC_PArray_t work);

// QR decomposition
void SLC_Mat<NTID>_QRD(SLC_PArray_t dst, SLC_PArray_t src);
#pragma endregion <NTID>_functions
