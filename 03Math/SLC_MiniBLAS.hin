#pragma region <NTID>_functions
void SLC_<NTID>_copyconj(
    SLC_<NTID>_t* dst, SLC_size_t dst_step,
    const SLC_<NTID>_t* src, SLC_size_t src_step,
    SLC_size_t count
);

//--- in-place operation identifiers have postfix 'ip'. ---
// addition (dst += src)
void SLC_<NTID>_addip(SLC_<NTID>_t* dst, const SLC_<NTID>_t* src, SLC_<ITID>_t count);

// scaling (dst *= scale)
void SLC_<NTID>_scaleip(SLC_<NTID>_t* dst, const SLC_<NTID>_t* scale, SLC_<ITID>_t count);

// scaling addition (dst += src * scale)
void SLC_<NTID>_scaleaddip(SLC_<NTID>_t* dst, const SLC_<NTID>_t* src, const SLC_<NTID>_t* scale, SLC_<ITID>_t count);

// element-by-element operation has a secondary postfix L'ebe'
// element-by-element product
void SLC_<NTID>_multiplyebeip(SLC_<NTID>_t* dst, const SLC_<NTID>_t* src, SLC_<ITID>_t count);

//--- substitutional operation identifiers have postfix 'subs'. ---
// addition
void SLC_<NTID>_addsubs(SLC_<NTID>_t* dst, const SLC_<NTID>_t* src0, const SLC_<NTID>_t* src1, SLC_<ITID>_t count);

// scaling
void SLC_<NTID>_scalesubs(SLC_<NTID>_t* dst, const SLC_<NTID>_t* src, const SLC_<NTID>_t* scale, SLC_<ITID>_t count);

// scaling addition
void SLC_<NTID>_scaleaddsubs(
    SLC_<NTID>_t* dst, 
    const SLC_<NTID>_t* src0, const SLC_<NTID>_t* scale0, 
    const SLC_<NTID>_t* src1, const SLC_<NTID>_t* scale1,
    SLC_<ITID>_t count);

// element-by-element operation has a secondary postfix L'ebe'
// element-by-element product
void SLC_<NTID>_multyplyebesubs(SLC_<NTID>_t* dst, const SLC_<NTID>_t* src0, const SLC_<NTID>_t* src1, SLC_<ITID>_t count);

void SLC_<NTID>_copyconj(
    SLC_<NTID>_t* dst, SLC_size_t dst_step,
    const SLC_<NTID>_t* src, SLC_size_t src_step,
    SLC_size_t count
);

//--- vector-in, scalar-out operation identifier does not have any postfix. ---
// inner product (sum(src0[]*conj(src1[])))
SLC_<NTID>_t SLC_<NTID>_innerproduct(const SLC_<NTID>_t* src0, const SLC_<NTID>_t* src1, SLC_<ITID>_t count);

// product-sum (sum(src0[]*src1[]))
SLC_<NTID>_t SLC_<NTID>_productsum(const SLC_<NTID>_t* src0, const SLC_<NTID>_t* src1, SLC_<ITID>_t count);

// sum of elements in an array
SLC_<NTID>_t SLC_<NTID>_sum(const SLC_<NTID>_t* src, SLC_<ITID>_t count);

// absolute sum
SLC_<RNTID>_t SLC_<NTID>_abssum(const SLC_<NTID>_t* src, SLC_<ITID>_t count);
#pragma endregion <NTID>_functions

